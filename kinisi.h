// ----------------------------------------------------------------------------
// Kinisi motr controller commands.
// This file is auto generated by the commands generator from JSON file.
// Do not edit this file manually.
// Timestamp: 2023-10-19 23:02:00
// Version: 1.0.0
// ----------------------------------------------------------------------------

#ifndef KINISI_H
#define KINISI_H

#include "Arduino.h"

// Commands// This command initializes a motor and prepares it for use.
#define INITIALIZE_MOTOR 0x01

// This command sets the speed of the specified motor.
#define SET_MOTOR_SPEED 0x02

// This command sets the controller for the specified motor.
#define INITIALIZE_MOTOR_CONTROLLER 0x03

// This command sets the target velocity for the specified motor.
#define SET_MOTOR_TARGET_VELOCITY 0x04

// This command deletes the controller for the specified motor.
#define DELETE_MOTOR_CONTROLLER 0x05

// This command initializes an encoder and prepares it for use.
#define INITIALIZE_ENCODER 0x11

// This command retrieves the current value of the encoder.
#define GET_ENCODER_VALUE 0x12

// This command sets the specified pin to a low state.
#define SET_PIN_LOW 0x20

// This command sets the specified pin to a high state.
#define SET_PIN_HIGH 0x21

// This command toggles the specified pin.
#define TOGGLE_PIN 0x22

// This command turns off the status LED.
#define SET_STATUS_LED_OFF 0x23

// This command turns on the status LED.
#define SET_STATUS_LED_ON 0x24

// This command toggles the status LED.
#define TOGGLE_STATUS_LED 0x25

// This command initializes the platform and prepares it for use.
#define INITIALIZE_PLATFORM 0x30

// This command sets the velocity input for the platform.
#define SET_PLATFORM_VELOCITY_INPUT 0x31

// This command sets the controller for the platform.
#define SET_PLATFORM_CONTROLLER 0x32


class KinisiController
{
public:
    // Constructor
    KinisiController(int address);

    // Starts Wire library
    void begin();

    // INITIALIZE_MOTOR: This command initializes a motor and prepares it for use.
    void initialize_motor(uint8_t motor_index);

    // SET_MOTOR_SPEED: This command sets the speed of the specified motor.
    void set_motor_speed(uint8_t motor_index, uint8_t direction, uint16_t speed);

    // INITIALIZE_MOTOR_CONTROLLER: This command sets the controller for the specified motor.
    void initialize_motor_controller(uint8_t motor_index, double kp, double ki, double kd);

    // SET_MOTOR_TARGET_VELOCITY: This command sets the target velocity for the specified motor.
    void set_motor_target_velocity(uint8_t motor_index, uint8_t direction, uint16_t speed);

    // DELETE_MOTOR_CONTROLLER: This command deletes the controller for the specified motor.
    void delete_motor_controller(uint8_t motor_index);

    // INITIALIZE_ENCODER: This command initializes an encoder and prepares it for use.
    void initialize_encoder(uint8_t encoder_index);

    // GET_ENCODER_VALUE: This command retrieves the current value of the encoder.
    void get_encoder_value(uint8_t encoder_index);

    // SET_PIN_LOW: This command sets the specified pin to a low state.
    void set_pin_low(uint8_t pin_number);

    // SET_PIN_HIGH: This command sets the specified pin to a high state.
    void set_pin_high(uint8_t pin_number);

    // TOGGLE_PIN: This command toggles the specified pin.
    void toggle_pin(uint8_t pin_number);

    // SET_STATUS_LED_OFF: This command turns off the status LED.
    void set_status_led_off();

    // SET_STATUS_LED_ON: This command turns on the status LED.
    void set_status_led_on();

    // TOGGLE_STATUS_LED: This command toggles the status LED.
    void toggle_status_led();

    // INITIALIZE_PLATFORM: This command initializes the platform and prepares it for use.
    void initialize_platform();

    // SET_PLATFORM_VELOCITY_INPUT: This command sets the velocity input for the platform.
    void set_platform_velocity_input(int8_t x, int8_t y, int8_t t);

    // SET_PLATFORM_CONTROLLER: This command sets the controller for the platform.
    void set_platform_controller();

private:
    int address;
};

#endif // KINISI_H
