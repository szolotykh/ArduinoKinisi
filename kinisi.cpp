// ----------------------------------------------------------------------------
// Kinisi motr controller commands.
// This file is auto generated by the commands generator from JSON file.
// Do not edit this file manually.
// Timestamp: 2023-10-19 23:02:00
// Version: 1.0.0
// ----------------------------------------------------------------------------

#include "kinisi.h"
#include "Wire.h"

// Constructor
KinisiController::KinisiController(int address)
{
    this->address = address;
}

// Begin
void KinisiController::begin()
{
    Wire.begin();
}

// INITIALIZE_MOTOR: This command initializes a motor and prepares it for use.
void KinisiController::initialize_motor(uint8_t motor_index)
{
    unsigned char cmd[] = {INITIALIZE_MOTOR, motor_index};
    Wire.beginTransmission(this->address);
    Wire.write(sizeof(cmd));
    Wire.endTransmission();

    Wire.beginTransmission(this->address);
    Wire.write(cmd, sizeof(cmd));
    Wire.endTransmission();
}

// SET_MOTOR_SPEED: This command sets the speed of the specified motor.
void KinisiController::set_motor_speed(uint8_t motor_index, uint8_t direction, uint16_t speed)
{
    unsigned char cmd[] = {SET_MOTOR_SPEED, motor_index, direction, speed};
    Wire.beginTransmission(this->address);
    Wire.write(sizeof(cmd));
    Wire.endTransmission();

    Wire.beginTransmission(this->address);
    Wire.write(cmd, sizeof(cmd));
    Wire.endTransmission();
}

// INITIALIZE_MOTOR_CONTROLLER: This command sets the controller for the specified motor.
void KinisiController::initialize_motor_controller(uint8_t motor_index, double kp, double ki, double kd)
{
    unsigned char cmd[] = {INITIALIZE_MOTOR_CONTROLLER, motor_index, kp, ki, kd};
    Wire.beginTransmission(this->address);
    Wire.write(sizeof(cmd));
    Wire.endTransmission();

    Wire.beginTransmission(this->address);
    Wire.write(cmd, sizeof(cmd));
    Wire.endTransmission();
}

// SET_MOTOR_TARGET_VELOCITY: This command sets the target velocity for the specified motor.
void KinisiController::set_motor_target_velocity(uint8_t motor_index, uint8_t direction, uint16_t speed)
{
    unsigned char cmd[] = {SET_MOTOR_TARGET_VELOCITY, motor_index, direction, speed};
    Wire.beginTransmission(this->address);
    Wire.write(sizeof(cmd));
    Wire.endTransmission();

    Wire.beginTransmission(this->address);
    Wire.write(cmd, sizeof(cmd));
    Wire.endTransmission();
}

// DELETE_MOTOR_CONTROLLER: This command deletes the controller for the specified motor.
void KinisiController::delete_motor_controller(uint8_t motor_index)
{
    unsigned char cmd[] = {DELETE_MOTOR_CONTROLLER, motor_index};
    Wire.beginTransmission(this->address);
    Wire.write(sizeof(cmd));
    Wire.endTransmission();

    Wire.beginTransmission(this->address);
    Wire.write(cmd, sizeof(cmd));
    Wire.endTransmission();
}

// INITIALIZE_ENCODER: This command initializes an encoder and prepares it for use.
void KinisiController::initialize_encoder(uint8_t encoder_index)
{
    unsigned char cmd[] = {INITIALIZE_ENCODER, encoder_index};
    Wire.beginTransmission(this->address);
    Wire.write(sizeof(cmd));
    Wire.endTransmission();

    Wire.beginTransmission(this->address);
    Wire.write(cmd, sizeof(cmd));
    Wire.endTransmission();
}

// GET_ENCODER_VALUE: This command retrieves the current value of the encoder.
void KinisiController::get_encoder_value(uint8_t encoder_index)
{
    unsigned char cmd[] = {GET_ENCODER_VALUE, encoder_index};
    Wire.beginTransmission(this->address);
    Wire.write(sizeof(cmd));
    Wire.endTransmission();

    Wire.beginTransmission(this->address);
    Wire.write(cmd, sizeof(cmd));
    Wire.endTransmission();
}

// SET_PIN_LOW: This command sets the specified pin to a low state.
void KinisiController::set_pin_low(uint8_t pin_number)
{
    unsigned char cmd[] = {SET_PIN_LOW, pin_number};
    Wire.beginTransmission(this->address);
    Wire.write(sizeof(cmd));
    Wire.endTransmission();

    Wire.beginTransmission(this->address);
    Wire.write(cmd, sizeof(cmd));
    Wire.endTransmission();
}

// SET_PIN_HIGH: This command sets the specified pin to a high state.
void KinisiController::set_pin_high(uint8_t pin_number)
{
    unsigned char cmd[] = {SET_PIN_HIGH, pin_number};
    Wire.beginTransmission(this->address);
    Wire.write(sizeof(cmd));
    Wire.endTransmission();

    Wire.beginTransmission(this->address);
    Wire.write(cmd, sizeof(cmd));
    Wire.endTransmission();
}

// TOGGLE_PIN: This command toggles the specified pin.
void KinisiController::toggle_pin(uint8_t pin_number)
{
    unsigned char cmd[] = {TOGGLE_PIN, pin_number};
    Wire.beginTransmission(this->address);
    Wire.write(sizeof(cmd));
    Wire.endTransmission();

    Wire.beginTransmission(this->address);
    Wire.write(cmd, sizeof(cmd));
    Wire.endTransmission();
}

// SET_STATUS_LED_OFF: This command turns off the status LED.
void KinisiController::set_status_led_off()
{
    unsigned char cmd[] = {SET_STATUS_LED_OFF};
    Wire.beginTransmission(this->address);
    Wire.write(sizeof(cmd));
    Wire.endTransmission();

    Wire.beginTransmission(this->address);
    Wire.write(cmd, sizeof(cmd));
    Wire.endTransmission();
}

// SET_STATUS_LED_ON: This command turns on the status LED.
void KinisiController::set_status_led_on()
{
    unsigned char cmd[] = {SET_STATUS_LED_ON};
    Wire.beginTransmission(this->address);
    Wire.write(sizeof(cmd));
    Wire.endTransmission();

    Wire.beginTransmission(this->address);
    Wire.write(cmd, sizeof(cmd));
    Wire.endTransmission();
}

// TOGGLE_STATUS_LED: This command toggles the status LED.
void KinisiController::toggle_status_led()
{
    unsigned char cmd[] = {TOGGLE_STATUS_LED};
    Wire.beginTransmission(this->address);
    Wire.write(sizeof(cmd));
    Wire.endTransmission();

    Wire.beginTransmission(this->address);
    Wire.write(cmd, sizeof(cmd));
    Wire.endTransmission();
}

// INITIALIZE_PLATFORM: This command initializes the platform and prepares it for use.
void KinisiController::initialize_platform()
{
    unsigned char cmd[] = {INITIALIZE_PLATFORM};
    Wire.beginTransmission(this->address);
    Wire.write(sizeof(cmd));
    Wire.endTransmission();

    Wire.beginTransmission(this->address);
    Wire.write(cmd, sizeof(cmd));
    Wire.endTransmission();
}

// SET_PLATFORM_VELOCITY_INPUT: This command sets the velocity input for the platform.
void KinisiController::set_platform_velocity_input(int8_t x, int8_t y, int8_t t)
{
    unsigned char cmd[] = {SET_PLATFORM_VELOCITY_INPUT, x, y, t};
    Wire.beginTransmission(this->address);
    Wire.write(sizeof(cmd));
    Wire.endTransmission();

    Wire.beginTransmission(this->address);
    Wire.write(cmd, sizeof(cmd));
    Wire.endTransmission();
}

// SET_PLATFORM_CONTROLLER: This command sets the controller for the platform.
void KinisiController::set_platform_controller()
{
    unsigned char cmd[] = {SET_PLATFORM_CONTROLLER};
    Wire.beginTransmission(this->address);
    Wire.write(sizeof(cmd));
    Wire.endTransmission();

    Wire.beginTransmission(this->address);
    Wire.write(cmd, sizeof(cmd));
    Wire.endTransmission();
}

